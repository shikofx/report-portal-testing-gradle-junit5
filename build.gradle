buildscript {
    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"

    }
}

plugins {
    id "org.sonarqube" version "${sonarqubePluginVersion}"
    id "io.qameta.allure" version "2.8.1"
}

group "${applicationGroup}"
version "${applicationVersion}"

targetCompatibility = javaVersion
sourceCompatibility = javaVersion

wrapper {
    gradleVersion = "${gradleWrapperVersion}"
}

configurations {
    testCompile
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://repo.gradle.org/gradle/libs-releases-local"
        }
    }

    test {
        useJUnitPlatform()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.sonarqube'
    apply plugin: 'java-gradle-plugin'

    group "${applicationGroup}"
    version "${applicationVersion}"

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    compileTestJava {
        options.encoding = "${encoding}"
    }


    dependencies {
        testImplementation group: 'org.junit.jupiter',
                           name: 'junit-jupiter-params',
                           version: "${junitJupiterVesion}"

        testImplementation group: 'org.junit.jupiter',
                           name: 'junit-jupiter-engine',
                           version: "${junitJupiterVesion}"

        testImplementation group: 'org.junit.platform',
                           name: 'junit-platform-runner',
                           version: "${junitPlatformVersion}"

        testImplementation group: 'org.assertj',
                           name: 'assertj-core',
                           version: "${assertJVersion}"

        testImplementation group: 'ch.qos.logback',
                           name: 'logback-classic',
                           version: "${logbackVersion}"

        testImplementation group: 'org.slf4j',
                           name: 'slf4j-log4j12',
                           version: "${slf4jVersion}"

        implementation group: 'com.epam.reportportal',
                       name: 'agent-java-junit5',
                       version: "${reportPortalVersion}"

        implementation group: 'com.epam.reportportal',
                       name: 'logger-java-logback',
                       version: "${reportPortalVersion}"

        testImplementation group: 'io.qameta.allure',
                           name: 'allure-junit5',
                           version: '2.14.0'

        runtimeOnly group: 'org.aspectj',
                    name: 'aspectjweaver',
                    version: '1.9.7'

    }

    def webtests = tasks.register('webtests', Test).configure() {
        useJUnitPlatform {
            includeTags "ui"
        }
    }

    def unittests = tasks.register('unittests', Test).configure() {
        useJUnitPlatform {
            includeTags "unit"
        }
    }

    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
        }
    }

}

test {
    useJUnitPlatform();
}

project.tasks["sonarqube"].dependsOn test

sonarqube {
    properties {
        property "sonar.login", "b79757745bfafd0b41cc06d5fb277f9e9871549e"
    }
}

allure {
    version = "${allureReportPluginVersion}"  // Latest Allure Version
    aspectjweaver = true
    autoconfigure = true
    useJUnit5 {
        version = "${allureReportVersion}" // Latest Allure Version
    }

    resultsDir = file("${buildDir}/test-results/allure-results")

    reportDir = file("${buildDir}/reports/allure-report")


}