buildscript {
    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

   dependencies {
       classpath "io.qameta.allure:allure-gradle:2.8.1"
   }
}

plugins {
    id "org.sonarqube" version "$sonarqubePluginVersion"
    id "io.qameta.allure" version "2.8.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.sonarqube'
apply plugin: 'java-gradle-plugin'

group "$applicationGroup"
version "$applicationVersion"

targetCompatibility = javaVersion
sourceCompatibility = javaVersion

wrapper {
    gradleVersion = "$gradleWrapperVersion"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.sonarqube'
    apply plugin: 'java-gradle-plugin'

    group "$applicationGroup"
    version "$applicationVersion"

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    compileTestJava {
        options.encoding = "$encoding"
    }

    dependencies {
        testImplementation group: 'org.junit.jupiter',
                           name: 'junit-jupiter-params',
                           version: "$junitJupiterVesion"

        testImplementation group: 'org.junit.jupiter',
                           name: 'junit-jupiter-engine',
                           version: "$junitJupiterVesion"

        testImplementation group: 'org.junit.platform',
                           name: 'junit-platform-runner',
                           version: "$junitPlatformVersion"

        testImplementation group: 'org.assertj',
                           name: 'assertj-core',
                           version: "$assertJVersion"

        testImplementation group: 'ch.qos.logback',
                           name: 'logback-classic',
                           version: "$logbackVersion"

        testImplementation group: 'org.slf4j',
                           name: 'slf4j-log4j12',
                           version: "$slf4jVersion"

        testImplementation group: 'com.epam.reportportal',
                           name: 'agent-java-junit5',
                           version: "$reportPortalVersion"

        testImplementation group: 'com.epam.reportportal',
                           name: 'logger-java-logback',
                           version: "$reportPortalVersion"
    }

    tasks.withType(Test).configureEach() {
        useJUnitPlatform()
        if (System.getProperty('browser') != null) {
            systemProperty 'browser', System.getProperty('browser')
        } else {
            System.setProperty('browser', 'chrome')
        }

        if (System.getProperty('grid') != null) {
            systemProperty 'grid', System.getProperty('grid')
        } else {
            System.setProperty('grid', 'false')
        }

        if (System.getProperty('hub-host') != null) {
            systemProperty 'hub-host', System.getProperty('hub-host')
        } else {
            System.setProperty('hub-host', 'false')
        }

        if (System.getProperty('target-os') != null) {
            systemProperty 'target-os', System.getProperty('target-os')
        } else {
            System.setProperty('target-os', 'false')
        }

        testLogging.showStandardStreams = true
        reports.junitXml.destination = file("build/test-results")
    }

    tasks.register('webtests', Test).configure() {
        description = "UI tests for web of Report Portal"
        group = "verification"
        useJUnitPlatform {
            includeTags "ui"
            excludeTags "unit"
        }
    }

    tasks.register('unittests', Test).configure() {
        description = "Unit tests for test utilities"
        group = "verification"
        useJUnitPlatform {
            includeTags "unit"
            excludeTags "ui"
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

   sonarqube {
       properties {
           property "sonar.sourceEncoding", "UTF-8"
       }
   }

    allure {
        group = 'report'
        version = "${allureReportPluginVersion}"  // Latest Allure Version
        aspectjweaver = true
        autoconfigure = true
        useJUnit5() {
            version = "${allureReportVersion}" // Latest Allure Version
        }

        reportDir = file("$projectDir/build/reports/allure-report")
    }
}

project.tasks["sonarqube"].dependsOn test
sonarqube {
    group = 'verification'
    properties {
        property "sonar.login", "ff56a59e4a48d3e2a1637bffa541b9f2c57fd662"
    }
}

apply from: "docker.gradle"


