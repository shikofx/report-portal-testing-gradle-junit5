#!groovy

properties([disableConcurrentBuilds()])

pipeline {

    agent {
        label 'master'
    }

    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        disableResume()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        disableConcurrentBuilds()
    }

    triggers {
        pollSCM('H/1 * * * *')
    }

    stages {
        stage('Compile') {
            steps {
                printHeader('COMPILATION')
                gradlew('clean', 'classes')
                gradlew('clean', 'testClasses')
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        printHeader('unit Tests')
                        gradlew('unittests')
                    }
                    post {
                        always {
                            junitReport()
                            publicReport('Unit Tests')
                        }
                    }
                }

                stage('END-TO-END Tests') {
                    steps {
                        printHeader('end-to-end Tests')
                        gradlew('webtests')
                    }
                    post {
                        always {
                            junitReport()
                            publicReport('End-To-End Tests')
                        }
                    }
                }
            }
        }
        stage ('Build and Report') {
            steps ('Build'){
                printHeader('BUILD')
                gradlew('assemble')
            }

            post {
                always{
                    script{
                        gradlew('allureReport')
//                        allure();
                    }
//                    script {
//                        printHeader('ALLUR report')
//                        allure([
//                            includeProperties: false,
//                            properties: [],
//                            reportBuildPolicy: 'ALWAYS',
//                            results : [[path: 'build/allure-results']]
//                        ])
                }
            }
        }
//        stage('Code Analysis') {
//            steps {
//                printHeader('SONARQUBE')
//                withSonarQubeEnv(credentialsId: 'SONARQUB_TOKEN_LOCALHOST', installationName: 'Sonar Local') {
//                    gradlew('sonarqube')
//                }
//            }
//        }
//        stage('Quality Gate') {
//            options {
//                timeout(time: 1, unit: 'MINUTES')
//                retry(2)
//            }
//            steps {
            //    printHeader('Wait Quality Gates callback')
//                waitForQualityGate abortPipeline: true
//            }
//        }
        stage('PR task') {
            when {
                branch 'PR-*'
            }

            steps {
                printHeader('Pull Request')
            }
        }
    }
}


def gradlew(String... args) {
    bat "./gradlew ${args.join(' ')} -s"
}

def junitReport() {
    junit skipPublishingChecks: true, allowEmptyResults: true, testResults: '**/build/test-results/**/*.xml'
}

def printHeader(String arg) {
    echo " ============================ Start $arg ============================ "
}

def publicReport(String name) {
    script {
        publishHTML (target : [allowMissing: false,
                               alwaysLinkToLastBuild: true,
                               keepAll: true,
                               reportDir: 'reports/tests',
                               reportFiles: 'index.html',
                               reportName: "$name",
                               reportTitles: "Test Report: $name"])
    }
}