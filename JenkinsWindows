#!groovy

properties([disableConcurrentBuilds()])

pipeline {

    agent {
        label 'master'
    }

    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        disableResume()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        disableConcurrentBuilds()
    }

    triggers {
        pollSCM('H/1 * * * *')
    }

    stages {
        stage('Compile') {
            steps {
                gradlew('clean', 'classes')
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        gradlew('unittests')
                    }
                    post {
                        always {
                            script {
                                allure([
                                        includeProperties: false,
                                        jdk: '',
                                        properties: [],
                                        reportBuildPolicy: 'ALWAYS',
                                        results: [[path: 'target/allure-results']]
                                ])
                            }
                        }
                    }
                    //TODO: Добавить JUnit reporter
                    //            post {
                    //                always {
                    //                    junit '**/build/test-results/test/TEST-*.xml'
                    //                }
                    //            }
                }

                stage('END-TO-END Tests') {
                    when {
                        branch 'master'
                    }
                    steps {
                        gradlew('webtests')
                    }

                    post {
                        always {
                            script {
                                allure([
                                        includeProperties: false,
                                        jdk: '',
                                        properties: [],
                                        reportBuildPolicy: 'ALWAYS',
                                        results: [[path: 'build/test-results/allure-results']]
                                ])
                            }
                        }
                    }
                }
            }
        }

        stage('Long Verification') {
            stage('Code Analysis') {
                steps {
                    withSonarQubeEnv(credentialsId: 'SONARQUBE_TOKEN', installationName: 'Sonar Local') {
                        gradlew('sonarqube')
                    }
                }


            }
        }
//TODO: Open port for Jenkins and create Webhook on Sonar server
//        stage('Quality Gate') {
//            steps {
//                waitForQualityGate abortPipeline: true
//            }
//        }

        stage('PR task') {
            when {
                branch 'PR-*'
            }

            steps {
                echo 'Steps for PR'
            }
        }

    }
}

def gradlew(String... args) {
    bat "./gradlew ${args.join(' ')} -s"
}